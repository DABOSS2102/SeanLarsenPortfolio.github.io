@inject ProjectService ProjectService

<section class="customSection" id="portfolio">
    <div class="card">
        <div class="card-header">
            <h2>Portfolio</h2>
        </div>
        <div class="card-body">
            <p>
                I have many project ideas that I'm equally excited to work on yet I need to find the time to work on them. I am always coming up with new ideas and I can't wait to see what comes from them.
            </p>
            @if (loading || !foundProjects)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div class="row">
                    @if (hero != null)
                    {
                        <div class="d-none col">
                            <div id="portfolioImageContainer">
                                <img src="@(hero.Src)" alt="@(hero.Alt)" />
                            </div>
                        </div>
                    }
                    @foreach (var stage in projects)
                    {
                        <div class="col-12">
                            <PortfolioStagesSection projects="@stage.Value" />
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private HeroImage? hero;
    bool loading = true, foundProjects = false;
    private Dictionary<string, List<Project>> projects = new Dictionary<string, List<Project>>();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            var allProjects = await ProjectService.GetProjectsFromCsv("sample-data/projects.csv");
            if (allProjects != null)
            {
                await SetProjectStages(allProjects);
            }
            hero = await HeroImageService.GetHeroAsync(img => img.Name == "portfolio");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading projects: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private Task SetProjectStages(List<Project> allProjects)
    {
        if (allProjects != null)
        {
            if (allProjects.Count > 0)
            {
                foundProjects = true;
            }
            foreach (var project in allProjects)
            {
                if (!projects.ContainsKey(project.Stage))
                {
                    projects.Add(project.Stage, new List<Project>());
                }
                projects[project.Stage].Add(project);
            }
        }
        return Task.CompletedTask;
    }
}
